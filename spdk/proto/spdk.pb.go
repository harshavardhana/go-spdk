// Code generated by protoc-gen-go.
// source: spdk.proto
// DO NOT EDIT!

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	spdk.proto

It has these top-level messages:
	ErrorResponse
	BlockDevice
	ConstructNVMEbdevRequest
	ConstructAIObdevRequest
	NVMFSubsystem
	ConstructNVMFSubsystemRequest
	ConstructTargetRequest
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

type ErrorResponse struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
	Code    int32  `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
}

func (m *ErrorResponse) Reset()                    { *m = ErrorResponse{} }
func (m *ErrorResponse) String() string            { return proto1.CompactTextString(m) }
func (*ErrorResponse) ProtoMessage()               {}
func (*ErrorResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type BlockDevice struct {
	NumBlocks        int32             `protobuf:"varint,1,opt,name=numBlocks" json:"numBlocks,omitempty"`
	SupportedIOTypes map[string]bool   `protobuf:"bytes,2,rep,name=supportedIOTypes" json:"supportedIOTypes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	IsOpenedForWrite bool              `protobuf:"varint,3,opt,name=isOpenedForWrite" json:"isOpenedForWrite,omitempty"`
	DriverSpecific   map[string]string `protobuf:"bytes,4,rep,name=driverSpecific" json:"driverSpecific,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	BlockSize        int32             `protobuf:"varint,5,opt,name=blockSize" json:"blockSize,omitempty"`
	ProductName      string            `protobuf:"bytes,6,opt,name=productName" json:"productName,omitempty"`
	Name             string            `protobuf:"bytes,7,opt,name=name" json:"name,omitempty"`
}

func (m *BlockDevice) Reset()                    { *m = BlockDevice{} }
func (m *BlockDevice) String() string            { return proto1.CompactTextString(m) }
func (*BlockDevice) ProtoMessage()               {}
func (*BlockDevice) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *BlockDevice) GetSupportedIOTypes() map[string]bool {
	if m != nil {
		return m.SupportedIOTypes
	}
	return nil
}

func (m *BlockDevice) GetDriverSpecific() map[string]string {
	if m != nil {
		return m.DriverSpecific
	}
	return nil
}

type ConstructNVMEbdevRequest struct {
	Name    string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Trtype  string `protobuf:"bytes,2,opt,name=trtype" json:"trtype,omitempty"`
	Traddr  string `protobuf:"bytes,3,opt,name=traddr" json:"traddr,omitempty"`
	Adrfam  string `protobuf:"bytes,4,opt,name=adrfam" json:"adrfam,omitempty"`
	Trsvcid string `protobuf:"bytes,5,opt,name=trsvcid" json:"trsvcid,omitempty"`
	Subnqn  string `protobuf:"bytes,6,opt,name=subnqn" json:"subnqn,omitempty"`
}

func (m *ConstructNVMEbdevRequest) Reset()                    { *m = ConstructNVMEbdevRequest{} }
func (m *ConstructNVMEbdevRequest) String() string            { return proto1.CompactTextString(m) }
func (*ConstructNVMEbdevRequest) ProtoMessage()               {}
func (*ConstructNVMEbdevRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type ConstructAIObdevRequest struct {
	Name      string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	FileName  string `protobuf:"bytes,2,opt,name=fileName" json:"fileName,omitempty"`
	BlockSize int32  `protobuf:"varint,3,opt,name=blockSize" json:"blockSize,omitempty"`
}

func (m *ConstructAIObdevRequest) Reset()                    { *m = ConstructAIObdevRequest{} }
func (m *ConstructAIObdevRequest) String() string            { return proto1.CompactTextString(m) }
func (*ConstructAIObdevRequest) ProtoMessage()               {}
func (*ConstructAIObdevRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type NVMFSubsystem struct {
	ListenAddresses []string `protobuf:"bytes,1,rep,name=listenAddresses" json:"listenAddresses,omitempty"`
	Core            int32    `protobuf:"varint,2,opt,name=core" json:"core,omitempty"`
	Nqn             string   `protobuf:"bytes,3,opt,name=nqn" json:"nqn,omitempty"`
	Hosts           []string `protobuf:"bytes,4,rep,name=hosts" json:"hosts,omitempty"`
	Subtype         string   `protobuf:"bytes,5,opt,name=subtype" json:"subtype,omitempty"`
}

func (m *NVMFSubsystem) Reset()                    { *m = NVMFSubsystem{} }
func (m *NVMFSubsystem) String() string            { return proto1.CompactTextString(m) }
func (*NVMFSubsystem) ProtoMessage()               {}
func (*NVMFSubsystem) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type ConstructNVMFSubsystemRequest struct {
	Core             int32  `protobuf:"varint,1,opt,name=core" json:"core,omitempty"`
	Nqn              string `protobuf:"bytes,2,opt,name=nqn" json:"nqn,omitempty"`
	Listen           string `protobuf:"bytes,3,opt,name=listen" json:"listen,omitempty"`
	Hosts            string `protobuf:"bytes,4,opt,name=hosts" json:"hosts,omitempty"`
	IsAnyHostAllowed bool   `protobuf:"varint,5,opt,name=isAnyHostAllowed" json:"isAnyHostAllowed,omitempty"`
	SerialNumber     string `protobuf:"bytes,6,opt,name=serialNumber" json:"serialNumber,omitempty"`
	Namespaces       string `protobuf:"bytes,7,opt,name=namespaces" json:"namespaces,omitempty"`
}

func (m *ConstructNVMFSubsystemRequest) Reset()                    { *m = ConstructNVMFSubsystemRequest{} }
func (m *ConstructNVMFSubsystemRequest) String() string            { return proto1.CompactTextString(m) }
func (*ConstructNVMFSubsystemRequest) ProtoMessage()               {}
func (*ConstructNVMFSubsystemRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type ConstructTargetRequest struct {
	Name           string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	AliasName      string `protobuf:"bytes,2,opt,name=aliasName" json:"aliasName,omitempty"`
	LunNameIdPairs string `protobuf:"bytes,3,opt,name=lunNameIdPairs" json:"lunNameIdPairs,omitempty"`
	PgigMappings   string `protobuf:"bytes,4,opt,name=pgigMappings" json:"pgigMappings,omitempty"`
	QueueDepth     int32  `protobuf:"varint,5,opt,name=queueDepth" json:"queueDepth,omitempty"`
	ChapDisabled   int32  `protobuf:"varint,6,opt,name=chapDisabled" json:"chapDisabled,omitempty"`
	ChapEnabled    int32  `protobuf:"varint,7,opt,name=chapEnabled" json:"chapEnabled,omitempty"`
	ChapRequired   int32  `protobuf:"varint,8,opt,name=chapRequired" json:"chapRequired,omitempty"`
	ChapMutual     int32  `protobuf:"varint,9,opt,name=chapMutual" json:"chapMutual,omitempty"`
	ChapAuthGroup  int32  `protobuf:"varint,10,opt,name=chapAuthGroup" json:"chapAuthGroup,omitempty"`
}

func (m *ConstructTargetRequest) Reset()                    { *m = ConstructTargetRequest{} }
func (m *ConstructTargetRequest) String() string            { return proto1.CompactTextString(m) }
func (*ConstructTargetRequest) ProtoMessage()               {}
func (*ConstructTargetRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func init() {
	proto1.RegisterType((*ErrorResponse)(nil), "proto.ErrorResponse")
	proto1.RegisterType((*BlockDevice)(nil), "proto.BlockDevice")
	proto1.RegisterType((*ConstructNVMEbdevRequest)(nil), "proto.ConstructNVMEbdevRequest")
	proto1.RegisterType((*ConstructAIObdevRequest)(nil), "proto.ConstructAIObdevRequest")
	proto1.RegisterType((*NVMFSubsystem)(nil), "proto.NVMFSubsystem")
	proto1.RegisterType((*ConstructNVMFSubsystemRequest)(nil), "proto.ConstructNVMFSubsystemRequest")
	proto1.RegisterType((*ConstructTargetRequest)(nil), "proto.ConstructTargetRequest")
}

func init() { proto1.RegisterFile("spdk.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 719 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x54, 0xcd, 0x6e, 0xe3, 0x36,
	0x10, 0x86, 0xec, 0xd8, 0xb1, 0x26, 0x4d, 0x1a, 0xb0, 0x6d, 0x2a, 0x04, 0x69, 0x61, 0x08, 0x45,
	0x60, 0xf4, 0x90, 0x43, 0x7b, 0x29, 0x0a, 0xf4, 0xe0, 0xc6, 0x4e, 0x9b, 0x83, 0x9d, 0x42, 0x0e,
	0xd2, 0x33, 0x25, 0x4e, 0x6c, 0x22, 0xb2, 0xc4, 0xf0, 0xc7, 0x85, 0xfb, 0x12, 0xfb, 0x1a, 0xfb,
	0x4a, 0x7b, 0x5e, 0x60, 0x9f, 0x63, 0x41, 0x52, 0xb6, 0x64, 0x27, 0xd8, 0x9c, 0xc4, 0xef, 0x13,
	0x39, 0xf3, 0xcd, 0x7c, 0x1c, 0x02, 0x28, 0xc1, 0x9e, 0xae, 0x84, 0x2c, 0x75, 0x49, 0x3a, 0xee,
	0x13, 0xff, 0x01, 0xc7, 0x63, 0x29, 0x4b, 0x99, 0xa0, 0x12, 0x65, 0xa1, 0x90, 0x44, 0x70, 0xb8,
	0x44, 0xa5, 0xe8, 0x1c, 0xa3, 0xa0, 0x1f, 0x0c, 0xc2, 0x64, 0x03, 0x09, 0x81, 0x83, 0xac, 0x64,
	0x18, 0xb5, 0xfa, 0xc1, 0xa0, 0x93, 0xb8, 0x75, 0xfc, 0xa1, 0x0d, 0x47, 0x7f, 0xe6, 0x65, 0xf6,
	0x34, 0xc2, 0x15, 0xcf, 0x90, 0x5c, 0x40, 0x58, 0x98, 0xa5, 0x63, 0x94, 0x3b, 0xdf, 0x49, 0x6a,
	0x82, 0xdc, 0xc3, 0xa9, 0x32, 0x42, 0x94, 0x52, 0x23, 0xbb, 0xbd, 0xbb, 0x5f, 0x0b, 0x54, 0x51,
	0xab, 0xdf, 0x1e, 0x1c, 0xfd, 0x32, 0xf0, 0xaa, 0xae, 0x1a, 0xb1, 0xae, 0x66, 0x7b, 0x5b, 0xc7,
	0x85, 0x96, 0xeb, 0xe4, 0x45, 0x04, 0xf2, 0x33, 0x9c, 0x72, 0x75, 0x27, 0xb0, 0x40, 0x76, 0x53,
	0xca, 0x7f, 0x25, 0xd7, 0x18, 0xb5, 0xfb, 0xc1, 0xa0, 0x97, 0xbc, 0xe0, 0xc9, 0x14, 0x4e, 0x98,
	0xe4, 0x2b, 0x94, 0x33, 0x81, 0x19, 0x7f, 0xe4, 0x59, 0x74, 0xe0, 0xf2, 0x5f, 0xbe, 0x92, 0x7f,
	0xb4, 0xb3, 0xd1, 0x67, 0xdf, 0x3b, 0x6d, 0xeb, 0x4d, 0xed, 0x91, 0x19, 0xff, 0x1f, 0xa3, 0x8e,
	0xaf, 0x77, 0x4b, 0x90, 0x3e, 0x1c, 0x09, 0x59, 0x32, 0x93, 0xe9, 0x29, 0x5d, 0x62, 0xd4, 0x75,
	0xfd, 0x6c, 0x52, 0xb6, 0xa7, 0x85, 0xfd, 0x75, 0xe8, 0x7e, 0xb9, 0xf5, 0xf9, 0x35, 0x7c, 0xf7,
	0x6a, 0xe9, 0xe4, 0x14, 0xda, 0x4f, 0xb8, 0xae, 0x6c, 0xb1, 0x4b, 0xf2, 0x2d, 0x74, 0x56, 0x34,
	0x37, 0xde, 0x93, 0x5e, 0xe2, 0xc1, 0xef, 0xad, 0xdf, 0x82, 0xf3, 0x21, 0x7c, 0xf3, 0x8a, 0xfe,
	0xb7, 0x42, 0x84, 0x8d, 0x10, 0xf1, 0xfb, 0x00, 0xa2, 0xeb, 0xb2, 0x50, 0x5a, 0x5a, 0xb5, 0x0f,
	0x93, 0x71, 0xca, 0x70, 0x95, 0xe0, 0xb3, 0x41, 0xa5, 0xb7, 0xc2, 0x83, 0x5a, 0x38, 0x39, 0x83,
	0xae, 0x96, 0x7a, 0x2d, 0x36, 0xb1, 0x2a, 0xe4, 0x79, 0xca, 0x98, 0x74, 0xb6, 0x38, 0xde, 0x22,
	0xcb, 0x53, 0x26, 0x1f, 0xe9, 0x32, 0x3a, 0xf0, 0xbc, 0x47, 0xf6, 0x0a, 0x6a, 0xa9, 0x56, 0x19,
	0x67, 0xae, 0xa5, 0x61, 0xb2, 0x81, 0xf6, 0x84, 0x32, 0x69, 0xf1, 0x5c, 0x54, 0xbd, 0xac, 0x50,
	0x3c, 0x87, 0xef, 0xb7, 0x4a, 0x87, 0xb7, 0x77, 0x6f, 0x09, 0x3d, 0x87, 0xde, 0x23, 0xcf, 0xd1,
	0x99, 0xe2, 0xa5, 0x6e, 0xf1, 0xae, 0xa3, 0xed, 0x3d, 0x47, 0xe3, 0x77, 0x01, 0x1c, 0x4f, 0x1f,
	0x26, 0x37, 0x33, 0x93, 0xaa, 0xb5, 0xd2, 0xb8, 0x24, 0x03, 0xf8, 0x3a, 0xe7, 0x4a, 0x63, 0x31,
	0x64, 0x4c, 0xa2, 0x52, 0x68, 0xef, 0x7d, 0x7b, 0x10, 0x26, 0xfb, 0xb4, 0x9f, 0x1f, 0xd9, 0x98,
	0x1f, 0x89, 0xd6, 0x0f, 0x5b, 0x8d, 0xef, 0x8b, 0x5d, 0x5a, 0x3f, 0x16, 0xa5, 0xd2, 0xca, 0x5d,
	0xcc, 0x30, 0xf1, 0xc0, 0xb6, 0x44, 0x99, 0xd4, 0xf5, 0xb6, 0x6a, 0x49, 0x05, 0xe3, 0x8f, 0x01,
	0xfc, 0xd0, 0x74, 0xa9, 0x96, 0xd6, 0xe8, 0x80, 0xcb, 0x1b, 0xbc, 0xcc, 0xdb, 0xaa, 0xf3, 0x9e,
	0x41, 0xd7, 0x0b, 0xde, 0x98, 0xe4, 0x51, 0x53, 0x4f, 0x50, 0xeb, 0x71, 0x33, 0x37, 0x2c, 0xd6,
	0x7f, 0x97, 0x4a, 0x0f, 0xf3, 0xbc, 0xfc, 0x0f, 0xbd, 0x57, 0x6e, 0xe6, 0x76, 0x79, 0x12, 0xc3,
	0x57, 0x0a, 0x25, 0xa7, 0xf9, 0xd4, 0x2c, 0x53, 0x94, 0x95, 0x75, 0x3b, 0x1c, 0xf9, 0x11, 0xc0,
	0x3a, 0xa3, 0x04, 0xcd, 0x50, 0x55, 0xd3, 0xd0, 0x60, 0xe2, 0x4f, 0x2d, 0x38, 0xdb, 0x56, 0x79,
	0x4f, 0xe5, 0x1c, 0xf5, 0x97, 0x0c, 0xbe, 0x80, 0x90, 0xe6, 0x9c, 0xaa, 0x86, 0xc3, 0x35, 0x41,
	0x2e, 0xe1, 0x24, 0x37, 0x85, 0x5d, 0xde, 0xb2, 0x7f, 0x28, 0x97, 0xaa, 0x2a, 0x79, 0x8f, 0xb5,
	0xc2, 0xc5, 0x9c, 0xcf, 0x27, 0x54, 0x08, 0x5e, 0xcc, 0x37, 0x1d, 0xd8, 0xe1, 0xac, 0xf0, 0x67,
	0x83, 0x06, 0x47, 0x28, 0xf4, 0xa2, 0x7a, 0x01, 0x1a, 0x8c, 0x8d, 0x91, 0x2d, 0xa8, 0x18, 0x71,
	0x45, 0xd3, 0x1c, 0x99, 0x2b, 0xbe, 0x93, 0xec, 0x70, 0xf6, 0x99, 0xb0, 0x78, 0x5c, 0xf8, 0x2d,
	0x87, 0x6e, 0x4b, 0x93, 0xda, 0x44, 0xb1, 0x25, 0x73, 0x89, 0x2c, 0xea, 0xd5, 0x51, 0x36, 0x9c,
	0x55, 0x62, 0xf1, 0xc4, 0x68, 0x43, 0xf3, 0x28, 0xf4, 0x4a, 0x6a, 0x86, 0xfc, 0x04, 0xc7, 0x16,
	0x0d, 0x8d, 0x5e, 0xfc, 0x25, 0x4b, 0x23, 0x22, 0x70, 0x5b, 0x76, 0xc9, 0xb4, 0xeb, 0xde, 0xc1,
	0x5f, 0x3f, 0x07, 0x00, 0x00, 0xff, 0xff, 0xcb, 0xcd, 0x52, 0x8e, 0x2b, 0x06, 0x00, 0x00,
}
